{"version":3,"file":"internal-types.js","sourceRoot":"","sources":["../../src/internal-types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAiBH,kGAA0G;AAAjG,yHAAA,uBAAuB,OAAA","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\nimport type * as graphqlTypes from 'graphql';\nimport type { PromiseOrValue } from 'graphql/jsutils/PromiseOrValue';\nimport type * as executor from '@graphql-tools/executor';\nimport { GraphQLToolsExecutorInstrumentationConfig } from './types';\nexport type {\n  executeArgumentsArray,\n  OtelExecutionArgs,\n  Maybe,\n  GraphQLPath,\n  OtelPatched,\n  ObjectWithGraphQLData,\n  GraphQLField,\n} from '@opentelemetry/instrumentation-graphql/build/src/internal-types';\nimport type { Maybe } from '@opentelemetry/instrumentation-graphql/build/src/internal-types';\nexport { OPERATION_NOT_SUPPORTED } from '@opentelemetry/instrumentation-graphql/build/src/internal-types';\n\n/**\n * Merged and parsed config of default instrumentation config and GraphQL\n */\nexport type GraphQLInstrumentationParsedConfig =\n  Required<GraphQLToolsExecutorInstrumentationConfig> & InstrumentationConfig;\n\nexport type executeFunctionWithObj = (\n  args: executor.ExecutionArgs\n) => PromiseOrValue<executor.SingularExecutionResult>;\n\nexport type executeFunctionWithArgs = (\n  schema: graphqlTypes.GraphQLSchema,\n  document: graphqlTypes.DocumentNode,\n  rootValue?: any,\n  contextValue?: any,\n  variableValues?: Maybe<{ [key: string]: any }>,\n  operationName?: Maybe<string>,\n  fieldResolver?: Maybe<graphqlTypes.GraphQLFieldResolver<any, any>>,\n  typeResolver?: Maybe<graphqlTypes.GraphQLTypeResolver<any, any>>\n) => PromiseOrValue<executor.SingularExecutionResult>;\n\nexport type executeType = executeFunctionWithObj | executeFunctionWithArgs;\n"]}