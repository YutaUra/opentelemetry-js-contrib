{"version":3,"file":"graphql.test.js","sourceRoot":"","sources":["../../test/graphql.test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAEH,kEAKuC;AACvC,4CAA0D;AAC1D,8EAAyE;AACzE,iCAAiC;AAEjC,gCAA6D;AAC7D,sCAAwC;AACxC,gEAA6D;AAK7D,qCAA6C;AAE7C,MAAM,aAAa,GAA8C,EAAE,CAAC;AACpE,MAAM,mCAAmC,GACvC,IAAI,yCAAmC,CAAC,aAAa,CAAC,CAAC;AACzD,mCAAmC,CAAC,MAAM,EAAE,CAAC;AAC7C,mCAAmC,CAAC,OAAO,EAAE,CAAC;AAE9C,8BAA8B;AAC9B,qCAMiB;AACjB,qCAA2C;AAC3C,uDAA4C;AAE5C,oDAAoD;AACpD,MAAM,MAAM,GAAG,IAAA,wBAAe,GAAE,CAAC;AAEjC,MAAM,WAAW,GAAG;;;;;;CAMnB,CAAC;AAEF,MAAM,cAAc,GAAG;;;;;;CAMtB,CAAC;AAEF,MAAM,aAAa,GAAG;;;;;;;;;CASrB,CAAC;AAEF,MAAM,uBAAuB,GAAG;;;;;;CAM/B,CAAC;AAEF,MAAM,QAAQ,GAAG;;CAEhB,CAAC;AAEF,MAAM,YAAY,GAAG;;;;;;CAMpB,CAAC;AAEF,MAAM,QAAQ,GAAG,IAAI,qCAAoB,EAAE,CAAC;AAC5C,MAAM,QAAQ,GAAG,IAAI,oCAAmB,EAAE,CAAC;AAC3C,QAAQ,CAAC,gBAAgB,CAAC,IAAI,oCAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC7D,mCAAmC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAEhE,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACvB,SAAS,MAAM,CAAC,SAAoD,EAAE;QACpE,mCAAmC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACtD,mCAAmC,CAAC,MAAM,EAAE,CAAC;IAC/C,CAAC;IAED,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,QAAQ,CAAC,4CAA4C,EAAE,GAAG,EAAE;YAC1D,IAAI,KAAqB,CAAC;YAC1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC,EAAE,CAAC,CAAC;gBACX,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;gBAC/C,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,aAAa;oBACb,eAAe;oBACf,cAAc;oBACd,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,SAAS,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAClD,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;gBACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEvB,IAAA,0BAAiB,EACf,iBAAiB,EACjB,OAAO,EACP,OAAO,EACP,QAAQ,EACR,WAAW,GAAG,cAAc,GAAG,OAAO,EACtC,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,CACjC,CAAC;gBACF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;gBACxD,IAAA,0BAAiB,EACf,KAAK,EACL,MAAM,EACN,cAAc,EACd,QAAQ,EACR,MAAM,EACN,QAAQ,CACT,CAAC;gBACF,IAAA,0BAAiB,EACf,KAAK,EACL,MAAM,EACN,cAAc,EACd,QAAQ,EACR,MAAM,EACN,QAAQ,CACT,CAAC;gBACF,IAAA,0BAAiB,EACf,KAAK,EACL,MAAM,EACN,cAAc,EACd,QAAQ,EACR,MAAM,EACN,QAAQ,CACT,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC9C,IAAI,KAAqB,CAAC;YAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC,EAAE,CAAC,CAAC;gBACX,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;gBAClD,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,aAAa;oBACb,qBAAqB;oBACrB,cAAc;oBACd,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,SAAS,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAClD,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;gBACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEvB,IAAA,0BAAiB,EACf,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,MAAM,EACN,iBAAiB,GAAG,cAAc,GAAG,OAAO,EAC5C,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,CACjC,CAAC;gBACF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;gBACxD,IAAA,0BAAiB,EACf,KAAK,EACL,MAAM,EACN,WAAW,EACX,QAAQ,EACR,MAAM,EACN,QAAQ,CACT,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,8CAA8C,EAAE,GAAG,EAAE;YAC5D,IAAI,KAAqB,CAAC;YAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC,EAAE,CAAC,CAAC;gBACX,MAAM,IAAA,yBAAO,EAAC;oBACZ,MAAM;oBACN,MAAM,EAAE,uBAAuB;oBAC/B,cAAc,EAAE;wBACd,EAAE,EAAE,CAAC;qBACN;iBACF,CAAC,CAAC;gBACH,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,gCAAgC;oBAChC,uBAAuB;oBACvB,cAAc;oBACd,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,QAAQ,CACT,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,GAAG,+BAAc,CAAC,SAAS,IAAI,CAAC,EACvD,SAAS,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;gBACzD,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;gBACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEvB,IAAA,0BAAiB,EACf,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,MAAM,EACN,mBAAmB,GAAG,cAAc,GAAG,OAAO,EAC9C,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,CACjC,CAAC;gBACF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;gBACxD,IAAA,0BAAiB,EACf,KAAK,EACL,MAAM,EACN,WAAW,EACX,QAAQ,EACR,MAAM,EACN,QAAQ,CACT,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,QAAQ,CAAC,4CAA4C,EAAE,GAAG,EAAE;YAC1D,IAAI,KAAqB,CAAC;YAC1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,KAAK,EAAE,CAAC;iBACT,CAAC,CAAC;gBACH,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;gBAC/C,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,aAAa;oBACb,eAAe;oBACf,cAAc;oBACd,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,SAAS,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAClD,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,QAAQ,CAAC,4CAA4C,EAAE,GAAG,EAAE;YAC1D,IAAI,KAAqB,CAAC;YAC1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;gBACH,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;gBAC/C,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,aAAa;oBACb,eAAe;oBACf,cAAc;oBACd,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,SAAS,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAClD,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;YACrC,IAAI,KAAqB,CAAC;YAC1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,CAAC;iBACT,CAAC,CAAC;gBACH,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;gBAC/C,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,+CAA+C,EAAE,GAAG,EAAE;QAC7D,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,CAAC;gBACL,yBAAyB,EAAE,IAAI;aAChC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,wBAAwB,GAAG,IAAI,uBAAa,CAAC;gBACjD,KAAK,EAAE,IAAI,2BAAiB,CAAC;oBAC3B,IAAI,EAAE,eAAe;oBACrB,MAAM,EAAE;wBACN,KAAK,EAAE;4BACL,IAAI,EAAE,uBAAa;4BACnB,OAAO;gCACL,OAAO,OAAO,CAAC;4BACjB,CAAC;yBACF;qBACF;iBACF,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,wBAAwB,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAC;YACzE,MAAM,YAAY,GAAG,QAAQ;iBAC1B,gBAAgB,EAAE;iBAClB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAS,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,UAAU,CAAC,KAAK,OAAO,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,MAAM,GAAG,IAAA,qBAAW,EAAC;;;;OAI1B,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO;aACrB,CAAC;YAEF,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;YAC1D,MAAM,YAAY,GAAG,QAAQ;iBAC1B,gBAAgB,EAAE;iBAClB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAS,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,UAAU,CAAC,KAAK,OAAO,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,MAAM,GAAG,IAAA,qBAAW,EAAC;;;;OAI1B,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,OAAO,EAAE,mCAAmC;aACpD,CAAC;YAEF,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC;YAC1D,MAAM,YAAY,GAAG,QAAQ;iBAC1B,gBAAgB,EAAE;iBAClB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAS,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,MAAM,GAAG,IAAA,qBAAW,EAAC;;;;OAI1B,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,OAAO,EAAE,mCAAmC;aACpD,CAAC;YAEF,yDAAyD;YACzD,sCAAsC;YACtC,MAAM,aAAa,GAAG,CACpB,MAAW,EACX,IAAS,EACT,OAAY,EACZ,IAAS,EACT,EAAE;gBACF,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAChC,CAAC,CAAC;YAEF,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC,CAAC;YACzE,MAAM,YAAY,GAAG,QAAQ;iBAC1B,gBAAgB,EAAE;iBAClB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAS,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,UAAU,CAAC,KAAK,OAAO,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC9C,IAAI,KAAqB,CAAC;YAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,WAAW,EAAE,IAAI;iBAClB,CAAC,CAAC;gBACH,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;gBAClD,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,aAAa;oBACb,qBAAqB;oBACrB,cAAc;oBACd,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,SAAS,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAClD,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;gBACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEvB,IAAA,0BAAiB,EACf,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,MAAM,EACN,iBAAiB,GAAG,cAAc,GAAG,OAAO,EAC5C,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,CACjC,CAAC;gBACF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;gBACxD,IAAA,0BAAiB,EACf,KAAK,EACL,MAAM,EACN,WAAW,EACX,QAAQ,EACR,MAAM,EACN,QAAQ,CACT,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;YACtC,IAAI,KAAqB,CAAC;YAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,WAAW,EAAE,IAAI;iBAClB,CAAC,CAAC;gBACH,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;gBACjD,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,wBAAwB;oBACxB,gBAAgB;oBAChB,4BAA4B;oBAC5B,0BAA0B;oBAC1B,WAAW;oBACX,YAAY;oBACZ,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,UAAU,CACX,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,SAAS,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;gBAC7D,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;gBACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEvB,IAAA,0BAAiB,EACf,iBAAiB,EACjB,SAAS,EACT,SAAS,EACT,MAAM,EACN,YAAY;oBACV,4BAA4B;oBAC5B,0BAA0B;oBAC1B,WAAW;oBACX,YAAY;oBACZ,OAAO,EACT,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,CACjC,CAAC;gBACF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;gBACxD,IAAA,0BAAiB,EAAC,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,8CAA8C,EAAE,GAAG,EAAE;YAC5D,IAAI,KAAqB,CAAC;YAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,WAAW,EAAE,IAAI;iBAClB,CAAC,CAAC;gBACH,MAAM,IAAA,yBAAO,EAAC;oBACZ,MAAM;oBACN,MAAM,EAAE,uBAAuB;oBAC/B,cAAc,EAAE;wBACd,EAAE,EAAE,CAAC;qBACN;iBACF,CAAC,CAAC;gBACH,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC,GAAG,EAAE;gBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;gBAC9C,KAAK,GAAG,EAAE,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;gBAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;oBACF,gCAAgC;oBAChC,uBAAuB;oBACvB,cAAc;oBACd,SAAS;oBACT,OAAO,CACV,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,QAAQ,CACT,CAAC;gBACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,GAAG,+BAAc,CAAC,SAAS,IAAI,CAAC,EACvD,CAAC,CACF,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;gBACzD,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;gBACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEvB,IAAA,0BAAiB,EACf,iBAAiB,EACjB,MAAM,EACN,MAAM,EACN,MAAM,EACN,mBAAmB,GAAG,cAAc,GAAG,OAAO,EAC9C,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,CACjC,CAAC;gBACF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;gBACxD,IAAA,0BAAiB,EACf,KAAK,EACL,MAAM,EACN,WAAW,EACX,QAAQ,EACR,MAAM,EACN,QAAQ,CACT,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAI,KAAqB,CAAC;QAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,CAAC;YACL,oBAAoB;aACrB,CAAC,CAAC;YACH,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;YACjD,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;YAC9C,KAAK,GAAG,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;gBACF,wBAAwB;gBACxB,gBAAgB;gBAChB,mBAAmB;gBACnB,wBAAwB;gBACxB,WAAW;gBACX,YAAY;gBACZ,SAAS;gBACT,OAAO,CACV,CAAC;YACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,UAAU,CACX,CAAC;YACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,SAAS,CACV,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;YAC7D,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,iBAAiB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEvB,IAAA,0BAAiB,EACf,iBAAiB,EACjB,SAAS,EACT,SAAS,EACT,MAAM,EACN,YAAY;gBACV,mBAAmB;gBACnB,wBAAwB;gBACxB,WAAW;gBACX,YAAY;gBACZ,OAAO,EACT,WAAW,CAAC,WAAW,EAAE,CAAC,MAAM,CACjC,CAAC;YACF,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC;YACxD,IAAA,0BAAiB,EAAC,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;QAC9C,IAAI,KAAqB,CAAC;QAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,CAAC,EAAE,CAAC,CAAC;YACX,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC5C,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;YAC9C,KAAK,GAAG,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;YAC5B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;QAClE,IAAI,KAAqB,CAAC;QAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,CAAC,EAAE,CAAC,CAAC;YACX,MAAM,IAAA,yBAAO,EAAC,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC;YAChD,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;YAC9C,KAAK,GAAG,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAI,KAAqB,CAAC;QAC1B,IAAI,aAAiE,CAAC;QACtE,MAAM,iBAAiB,GAAG,cAAc,CAAC;QAEzC,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;YAC9C,KAAK,GAAG,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;YAC1C,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,YAAY,EAAE,CAAC,IAAU,EAAE,IAAkC,EAAE,EAAE;wBAC/D,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC7D,CAAC;iBACF,CAAC,CAAC;gBACH,MAAM,wBAAwB,GAAG,MAAM,IAAA,yBAAO,EAAC;oBAC7C,MAAM;oBACN,MAAM,EAAE,WAAW;iBACpB,CAAC,CAAC;gBACH,IAAI,MAAM,CAAC,aAAa,IAAI,wBAAwB,EAAE;oBACpD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;iBAClD;gBACD,aAAa;oBACX,wBAAkE,CAAC;gBACrE,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;gBACjE,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAC1B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,KAAK,OAAO,CACnE,CAAC;gBACF,MAAM,qBAAqB,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,CAAC,iBAAiB,CAAC,CAAC;gBACvE,MAAM,CAAC,eAAe,CACpB,qBAAqB,EACrB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAC9B,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,mCAAmC,EAAE,GAAG,EAAE;YACjD,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,MAAM,CAAC;oBACL,YAAY,EAAE,CAAC,KAAW,EAAE,KAAmC,EAAE,EAAE;wBACjE,MAAM,uBAAuB,CAAC;oBAChC,CAAC;iBACF,CAAC,CAAC;gBACH,MAAM,wBAAwB,GAAG,MAAM,IAAA,yBAAO,EAAC;oBAC7C,MAAM;oBACN,MAAM,EAAE,WAAW;iBACpB,CAAC,CAAC;gBACH,IAAI,MAAM,CAAC,aAAa,IAAI,wBAAwB,EAAE;oBACpD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;iBAClD;gBACD,aAAa;oBACX,wBAAkE,CAAC;gBACrE,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;;gBAChC,MAAM,CAAC,eAAe,CAAC,MAAA,MAAA,aAAa,CAAC,IAAI,0CAAE,KAAK,0CAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;YACnD,UAAU,CAAC,KAAK,IAAI,EAAE;gBACpB,qGAAqG;gBACrG,MAAM,eAAe,GAAG,IAAe,CAAC;gBACxC,MAAM,CAAC;oBACL,YAAY,EACV,eAA2E;iBAC9E,CAAC,CAAC;gBACH,MAAM,wBAAwB,GAAG,MAAM,IAAA,yBAAO,EAAC;oBAC7C,MAAM;oBACN,MAAM,EAAE,WAAW;iBACpB,CAAC,CAAC;gBACH,IAAI,MAAM,CAAC,aAAa,IAAI,wBAAwB,EAAE;oBACpD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;iBAClD;gBACD,aAAa;oBACX,wBAAkE,CAAC;gBACrE,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YACtC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;;gBAChC,MAAM,CAAC,eAAe,CAAC,MAAA,MAAA,aAAa,CAAC,IAAI,0CAAE,KAAK,0CAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC1D,IAAI,KAAqB,CAAC;QAE1B,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,MAAM,CAAC,EAAE,CAAC,CAAC;YACX,MAAM,IAAA,yBAAO,EAAC;gBACZ,MAAM;gBACN,MAAM,EAAE,cAAc;gBACtB,aAAa,EAAE,KAAK;aACrB,CAAC,CAAC;YACH,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,KAAK,EAAE,CAAC;YACjB,mCAAmC,CAAC,OAAO,EAAE,CAAC;YAC9C,KAAK,GAAG,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACnC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAE7B,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,IAAI;gBACF,aAAa;gBACb,qBAAqB;gBACrB,cAAc;gBACd,SAAS;gBACT,OAAO,CACV,CAAC;YACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,+BAA+B,CAChC,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,gBAAS,CAAC,OAAO,CAAC,CAAC;YAC5D,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;QAChC,MAAM,gBAAgB,GAAG,IAAA,qBAAW,EAAC;;;;KAIpC,CAAC,CAAC;QAEH,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,CAAC,EAAE,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,GAAG,EAAE;YACb,QAAQ,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,GAAG,EAAE,CAAC,cAAc;aAC5B,CAAC;YACF,MAAM,MAAM,GAAG,WAAW,CAAC;YAE3B,MAAM,GAAG,GAAG,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC;YAEtD,mCAAmC;YACnC,MAAM,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YAC1C,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;YAC3D,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,GAAG,YAAY,CAAC;YACnC,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,MAAM,CAAC,EAC7C,MAAM,CACP,CAAC;YACF,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,UAAU,CAAC,+BAAc,CAAC,cAAc,CAAC,EACrD,OAAO,CACR,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;;YACrD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,GAAG,EAAE;oBACV,MAAM,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAChD,CAAC;aACF,CAAC;YACF,MAAM,MAAM,GAAG,WAAW,CAAC;YAE3B,2FAA2F;YAC3F,MAAM,GAAG,GAAG,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAE5C,uCAAuC;YACvC,MAAM,CAAC,eAAe,CAAC,MAAA,GAAG,CAAC,MAAM,0CAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAC9C,MAAM,aAAa,GAAG,MAAA,GAAG,CAAC,MAAM,0CAAG,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,eAAe,CACpB,aAAa,CAAC,OAAO,EACrB,gCAAgC,CACjC,CAAC;YAEF,iEAAiE;YACjE,MAAM,KAAK,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;YAE1C,yDAAyD;YACzD,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,gBAAS,CAAC,OAAO,CAAC,CAAC;YACrE,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAc,CAAC,KAAK,CAAC,CAAC;YACtE,MAAM,CAAC,eAAe,CACpB,WAAW,CAAC,MAAM,CAAC,OAAO,EAC1B,gCAAgC,CACjC,CAAC;YACF,MAAM,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YACvD,MAAM,CAAC,eAAe,CACpB,MAAA,YAAY,CAAC,UAAU,0CAAG,yCAAkB,CAAC,iBAAiB,CAAC,EAC/D,gCAAgC,CACjC,CAAC;YAEF,sBAAsB;YACtB,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;YAC3D,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BasicTracerProvider,\n  InMemorySpanExporter,\n  ReadableSpan,\n  SimpleSpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport { Span, SpanStatusCode } from '@opentelemetry/api';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport * as assert from 'assert';\nimport type * as graphqlTypes from 'graphql';\nimport { GraphQLToolsExecutorInstrumentation } from '../src';\nimport { SpanNames } from '../src/enum';\nimport { AttributeNames } from '../src/enums/AttributeNames';\nimport {\n  GraphQLToolsExecutorInstrumentationConfig,\n  GraphQLToolsExecutorInstrumentationExecutionResponseHook,\n} from '../src/types';\nimport { assertResolveSpan } from './helper';\n\nconst defaultConfig: GraphQLToolsExecutorInstrumentationConfig = {};\nconst graphQLToolsExecutorInstrumentation =\n  new GraphQLToolsExecutorInstrumentation(defaultConfig);\ngraphQLToolsExecutorInstrumentation.enable();\ngraphQLToolsExecutorInstrumentation.disable();\n\n// now graphql can be required\nimport {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString,\n  buildSchema,\n  graphqlSync,\n} from 'graphql';\nimport { buildTestSchema } from './schema';\nimport { graphql } from './graphql-adaptor';\n\n// Construct a schema, using GraphQL schema language\nconst schema = buildTestSchema();\n\nconst sourceList1 = `\n  query {\n    books {\n      name\n    }\n  }\n`;\n\nconst sourceBookById = `\n  query {\n    book(id: 0) {\n      name\n    }\n  }\n`;\n\nconst sourceAddBook = `\n  mutation AddBook {\n    addBook(\n      name: \"Fifth Book\"\n      authorIds: \"0,2\"\n    ) {\n      id\n    }\n  }\n`;\n\nconst sourceFindUsingVariable = `\n  query Query1 ($id: Int!) {\n    book(id: $id) {\n      name\n    }\n  }\n`;\n\nconst badQuery = `\n  query foo bar\n`;\n\nconst queryInvalid = `\n  query {\n    book(id: \"a\") {\n      name\n    }\n  }\n`;\n\nconst exporter = new InMemorySpanExporter();\nconst provider = new BasicTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(exporter));\ngraphQLToolsExecutorInstrumentation.setTracerProvider(provider);\n\ndescribe('graphql', () => {\n  function create(config: GraphQLToolsExecutorInstrumentationConfig = {}) {\n    graphQLToolsExecutorInstrumentation.setConfig(config);\n    graphQLToolsExecutorInstrumentation.enable();\n  }\n\n  describe('when depth is not set', () => {\n    describe('AND source is query to get a list of books', () => {\n      let spans: ReadableSpan[];\n      beforeEach(async () => {\n        create({});\n        await graphql({ schema, source: sourceList1 });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 5 spans', () => {\n        assert.deepStrictEqual(spans.length, 5);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[4];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  query {\\n' +\n            '    books {\\n' +\n            '      name\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'query'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          undefined\n        );\n        assert.deepStrictEqual(executeSpan.name, 'query');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n\n      it('should instrument resolvers', () => {\n        const executeSpan = spans[4];\n        const resolveParentSpan = spans[0];\n        const span1 = spans[1];\n        const span2 = spans[2];\n        const span3 = spans[3];\n\n        assertResolveSpan(\n          resolveParentSpan,\n          'books',\n          'books',\n          '[Book]',\n          'books {\\n' + '      name\\n' + '    }',\n          executeSpan.spanContext().spanId\n        );\n        const parentId = resolveParentSpan.spanContext().spanId;\n        assertResolveSpan(\n          span1,\n          'name',\n          'books.0.name',\n          'String',\n          'name',\n          parentId\n        );\n        assertResolveSpan(\n          span2,\n          'name',\n          'books.1.name',\n          'String',\n          'name',\n          parentId\n        );\n        assertResolveSpan(\n          span3,\n          'name',\n          'books.2.name',\n          'String',\n          'name',\n          parentId\n        );\n      });\n    });\n    describe('AND source is query with param', () => {\n      let spans: ReadableSpan[];\n\n      beforeEach(async () => {\n        create({});\n        await graphql({ schema, source: sourceBookById });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 5 spans', () => {\n        assert.deepStrictEqual(spans.length, 3);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[2];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  query {\\n' +\n            '    book(id: *) {\\n' +\n            '      name\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'query'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          undefined\n        );\n        assert.deepStrictEqual(executeSpan.name, 'query');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n\n      it('should instrument resolvers', () => {\n        const executeSpan = spans[2];\n        const resolveParentSpan = spans[0];\n        const span1 = spans[1];\n\n        assertResolveSpan(\n          resolveParentSpan,\n          'book',\n          'book',\n          'Book',\n          'book(id: *) {\\n' + '      name\\n' + '    }',\n          executeSpan.spanContext().spanId\n        );\n        const parentId = resolveParentSpan.spanContext().spanId;\n        assertResolveSpan(\n          span1,\n          'name',\n          'book.name',\n          'String',\n          'name',\n          parentId\n        );\n      });\n    });\n    describe('AND source is query with param and variables', () => {\n      let spans: ReadableSpan[];\n\n      beforeEach(async () => {\n        create({});\n        await graphql({\n          schema,\n          source: sourceFindUsingVariable,\n          variableValues: {\n            id: 2,\n          },\n        });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 5 spans', () => {\n        assert.deepStrictEqual(spans.length, 3);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[2];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  query Query1 ($id: Int!) {\\n' +\n            '    book(id: $id) {\\n' +\n            '      name\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'query'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          'Query1'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[`${AttributeNames.VARIABLES}id`],\n          undefined\n        );\n        assert.deepStrictEqual(executeSpan.name, 'query Query1');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n\n      it('should instrument resolvers', () => {\n        const executeSpan = spans[2];\n        const resolveParentSpan = spans[0];\n        const span1 = spans[1];\n\n        assertResolveSpan(\n          resolveParentSpan,\n          'book',\n          'book',\n          'Book',\n          'book(id: $id) {\\n' + '      name\\n' + '    }',\n          executeSpan.spanContext().spanId\n        );\n        const parentId = resolveParentSpan.spanContext().spanId;\n        assertResolveSpan(\n          span1,\n          'name',\n          'book.name',\n          'String',\n          'name',\n          parentId\n        );\n      });\n    });\n  });\n\n  describe('when depth is set to 0', () => {\n    describe('AND source is query to get a list of books', () => {\n      let spans: ReadableSpan[];\n      beforeEach(async () => {\n        create({\n          depth: 0,\n        });\n        await graphql({ schema, source: sourceList1 });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 3 spans', () => {\n        assert.deepStrictEqual(spans.length, 1);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[0];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  query {\\n' +\n            '    books {\\n' +\n            '      name\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'query'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          undefined\n        );\n        assert.deepStrictEqual(executeSpan.name, 'query');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n    });\n  });\n\n  describe('when mergeItems is set to true', () => {\n    describe('AND source is query to get a list of books', () => {\n      let spans: ReadableSpan[];\n      beforeEach(async () => {\n        create({\n          mergeItems: true,\n        });\n        await graphql({ schema, source: sourceList1 });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 5 spans', () => {\n        assert.deepStrictEqual(spans.length, 3);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[2];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  query {\\n' +\n            '    books {\\n' +\n            '      name\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'query'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          undefined\n        );\n        assert.deepStrictEqual(executeSpan.name, 'query');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n    });\n\n    describe('AND depth is set to 0', () => {\n      let spans: ReadableSpan[];\n      beforeEach(async () => {\n        create({\n          mergeItems: true,\n          depth: 0,\n        });\n        await graphql({ schema, source: sourceList1 });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 3 spans', () => {\n        assert.deepStrictEqual(spans.length, 1);\n      });\n    });\n  });\n\n  describe('when ignoreTrivialResolveSpans is set to true', () => {\n    beforeEach(() => {\n      create({\n        ignoreTrivialResolveSpans: true,\n      });\n    });\n\n    afterEach(() => {\n      exporter.reset();\n      graphQLToolsExecutorInstrumentation.disable();\n    });\n\n    it('should create span for resolver defined on schema', async () => {\n      const simpleSchemaWithResolver = new GraphQLSchema({\n        query: new GraphQLObjectType({\n          name: 'RootQueryType',\n          fields: {\n            hello: {\n              type: GraphQLString,\n              resolve() {\n                return 'world';\n              },\n            },\n          },\n        }),\n      });\n\n      await graphql({ schema: simpleSchemaWithResolver, source: '{ hello }' });\n      const resovleSpans = exporter\n        .getFinishedSpans()\n        .filter(span => span.name === SpanNames.RESOLVE);\n      assert.deepStrictEqual(resovleSpans.length, 1);\n      const resolveSpan = resovleSpans[0];\n      assert(resolveSpan.attributes[AttributeNames.FIELD_PATH] === 'hello');\n    });\n\n    it('should create span for resolver function', async () => {\n      const schema = buildSchema(`\n        type Query {\n          hello: String\n        }\n      `);\n\n      const rootValue = {\n        hello: () => 'world',\n      };\n\n      await graphql({ schema, source: '{ hello }', rootValue });\n      const resovleSpans = exporter\n        .getFinishedSpans()\n        .filter(span => span.name === SpanNames.RESOLVE);\n      assert.deepStrictEqual(resovleSpans.length, 1);\n      const resolveSpan = resovleSpans[0];\n      assert(resolveSpan.attributes[AttributeNames.FIELD_PATH] === 'hello');\n    });\n\n    it('should NOT create span for resolver property', async () => {\n      const schema = buildSchema(`\n        type Query {\n          hello: String\n        }\n      `);\n\n      const rootValue = {\n        hello: 'world', // regular property, not a function\n      };\n\n      await graphql({ schema, source: '{ hello }', rootValue });\n      const resovleSpans = exporter\n        .getFinishedSpans()\n        .filter(span => span.name === SpanNames.RESOLVE);\n      assert.deepStrictEqual(resovleSpans.length, 0);\n    });\n\n    it('should create resolve span for custom field resolver', async () => {\n      const schema = buildSchema(`\n        type Query {\n          hello: String\n        }\n      `);\n\n      const rootValue = {\n        hello: 'world', // regular property, not a function\n      };\n\n      // since we use a custom field resolver, we record a span\n      // even though the field is a property\n      const fieldResolver = (\n        source: any,\n        args: any,\n        context: any,\n        info: any\n      ) => {\n        return source[info.fieldName];\n      };\n\n      await graphql({ schema, source: '{ hello }', rootValue, fieldResolver });\n      const resovleSpans = exporter\n        .getFinishedSpans()\n        .filter(span => span.name === SpanNames.RESOLVE);\n      assert.deepStrictEqual(resovleSpans.length, 1);\n      const resolveSpan = resovleSpans[0];\n      assert(resolveSpan.attributes[AttributeNames.FIELD_PATH] === 'hello');\n    });\n  });\n\n  describe('when allowValues is set to true', () => {\n    describe('AND source is query with param', () => {\n      let spans: ReadableSpan[];\n\n      beforeEach(async () => {\n        create({\n          allowValues: true,\n        });\n        await graphql({ schema, source: sourceBookById });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 5 spans', () => {\n        assert.deepStrictEqual(spans.length, 3);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[2];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  query {\\n' +\n            '    book(id: 0) {\\n' +\n            '      name\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'query'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          undefined\n        );\n        assert.deepStrictEqual(executeSpan.name, 'query');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n\n      it('should instrument resolvers', () => {\n        const executeSpan = spans[2];\n        const resolveParentSpan = spans[0];\n        const span1 = spans[1];\n\n        assertResolveSpan(\n          resolveParentSpan,\n          'book',\n          'book',\n          'Book',\n          'book(id: 0) {\\n' + '      name\\n' + '    }',\n          executeSpan.spanContext().spanId\n        );\n        const parentId = resolveParentSpan.spanContext().spanId;\n        assertResolveSpan(\n          span1,\n          'name',\n          'book.name',\n          'String',\n          'name',\n          parentId\n        );\n      });\n    });\n    describe('AND mutation is called', () => {\n      let spans: ReadableSpan[];\n\n      beforeEach(async () => {\n        create({\n          allowValues: true,\n        });\n        await graphql({ schema, source: sourceAddBook });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 3 spans', () => {\n        assert.deepStrictEqual(spans.length, 3);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[2];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  mutation AddBook {\\n' +\n            '    addBook(\\n' +\n            '      name: \"Fifth Book\"\\n' +\n            '      authorIds: \"0,2\"\\n' +\n            '    ) {\\n' +\n            '      id\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'mutation'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          'AddBook'\n        );\n        assert.deepStrictEqual(executeSpan.name, 'mutation AddBook');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n\n      it('should instrument resolvers', () => {\n        const executeSpan = spans[2];\n        const resolveParentSpan = spans[0];\n        const span1 = spans[1];\n\n        assertResolveSpan(\n          resolveParentSpan,\n          'addBook',\n          'addBook',\n          'Book',\n          'addBook(\\n' +\n            '      name: \"Fifth Book\"\\n' +\n            '      authorIds: \"0,2\"\\n' +\n            '    ) {\\n' +\n            '      id\\n' +\n            '    }',\n          executeSpan.spanContext().spanId\n        );\n        const parentId = resolveParentSpan.spanContext().spanId;\n        assertResolveSpan(span1, 'id', 'addBook.id', 'Int', 'id', parentId);\n      });\n    });\n    describe('AND source is query with param and variables', () => {\n      let spans: ReadableSpan[];\n\n      beforeEach(async () => {\n        create({\n          allowValues: true,\n        });\n        await graphql({\n          schema,\n          source: sourceFindUsingVariable,\n          variableValues: {\n            id: 2,\n          },\n        });\n        spans = exporter.getFinishedSpans();\n      });\n\n      afterEach(() => {\n        exporter.reset();\n        graphQLToolsExecutorInstrumentation.disable();\n        spans = [];\n      });\n\n      it('should have 3 spans', () => {\n        assert.deepStrictEqual(spans.length, 3);\n      });\n\n      it('should instrument execute', () => {\n        const executeSpan = spans[2];\n\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.SOURCE],\n          '\\n' +\n            '  query Query1 ($id: Int!) {\\n' +\n            '    book(id: $id) {\\n' +\n            '      name\\n' +\n            '    }\\n' +\n            '  }\\n'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n          'query'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[AttributeNames.OPERATION_NAME],\n          'Query1'\n        );\n        assert.deepStrictEqual(\n          executeSpan.attributes[`${AttributeNames.VARIABLES}id`],\n          2\n        );\n        assert.deepStrictEqual(executeSpan.name, 'query Query1');\n        assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n      });\n\n      it('should instrument resolvers', () => {\n        const executeSpan = spans[2];\n        const resolveParentSpan = spans[0];\n        const span1 = spans[1];\n\n        assertResolveSpan(\n          resolveParentSpan,\n          'book',\n          'book',\n          'Book',\n          'book(id: $id) {\\n' + '      name\\n' + '    }',\n          executeSpan.spanContext().spanId\n        );\n        const parentId = resolveParentSpan.spanContext().spanId;\n        assertResolveSpan(\n          span1,\n          'name',\n          'book.name',\n          'String',\n          'name',\n          parentId\n        );\n      });\n    });\n  });\n\n  describe('when mutation is called', () => {\n    let spans: ReadableSpan[];\n\n    beforeEach(async () => {\n      create({\n        // allowValues: true\n      });\n      await graphql({ schema, source: sourceAddBook });\n      spans = exporter.getFinishedSpans();\n    });\n\n    afterEach(() => {\n      exporter.reset();\n      graphQLToolsExecutorInstrumentation.disable();\n      spans = [];\n    });\n\n    it('should have 3 spans', () => {\n      assert.deepStrictEqual(spans.length, 3);\n    });\n\n    it('should instrument execute', () => {\n      const executeSpan = spans[2];\n\n      assert.deepStrictEqual(\n        executeSpan.attributes[AttributeNames.SOURCE],\n        '\\n' +\n          '  mutation AddBook {\\n' +\n          '    addBook(\\n' +\n          '      name: \"*\"\\n' +\n          '      authorIds: \"*\"\\n' +\n          '    ) {\\n' +\n          '      id\\n' +\n          '    }\\n' +\n          '  }\\n'\n      );\n      assert.deepStrictEqual(\n        executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n        'mutation'\n      );\n      assert.deepStrictEqual(\n        executeSpan.attributes[AttributeNames.OPERATION_NAME],\n        'AddBook'\n      );\n      assert.deepStrictEqual(executeSpan.name, 'mutation AddBook');\n      assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n    });\n\n    it('should instrument resolvers', () => {\n      const executeSpan = spans[2];\n      const resolveParentSpan = spans[0];\n      const span1 = spans[1];\n\n      assertResolveSpan(\n        resolveParentSpan,\n        'addBook',\n        'addBook',\n        'Book',\n        'addBook(\\n' +\n          '      name: \"*\"\\n' +\n          '      authorIds: \"*\"\\n' +\n          '    ) {\\n' +\n          '      id\\n' +\n          '    }',\n        executeSpan.spanContext().spanId\n      );\n      const parentId = resolveParentSpan.spanContext().spanId;\n      assertResolveSpan(span1, 'id', 'addBook.id', 'Int', 'id', parentId);\n    });\n  });\n\n  describe.skip('when query is not correct', () => {\n    let spans: ReadableSpan[];\n\n    beforeEach(async () => {\n      create({});\n      await graphql({ schema, source: badQuery });\n      spans = exporter.getFinishedSpans();\n    });\n\n    afterEach(() => {\n      exporter.reset();\n      graphQLToolsExecutorInstrumentation.disable();\n      spans = [];\n    });\n\n    it('should have 1 span', () => {\n      assert.deepStrictEqual(spans.length, 1);\n    });\n  });\n\n  describe.skip('when query is correct but cannot be validated', () => {\n    let spans: ReadableSpan[];\n\n    beforeEach(async () => {\n      create({});\n      await graphql({ schema, source: queryInvalid });\n      spans = exporter.getFinishedSpans();\n    });\n\n    afterEach(() => {\n      exporter.reset();\n      graphQLToolsExecutorInstrumentation.disable();\n      spans = [];\n    });\n\n    it('should have 2 spans', () => {\n      assert.deepStrictEqual(spans.length, 2);\n    });\n  });\n\n  describe('responseHook', () => {\n    let spans: ReadableSpan[];\n    let graphqlResult: graphqlTypes.ExecutionResult<{ books: unknown[] }>;\n    const dataAttributeName = 'graphql_data';\n\n    afterEach(() => {\n      exporter.reset();\n      graphQLToolsExecutorInstrumentation.disable();\n      spans = [];\n    });\n\n    describe('when responseHook is valid', () => {\n      beforeEach(async () => {\n        create({\n          responseHook: (span: Span, data: graphqlTypes.ExecutionResult) => {\n            span.setAttribute(dataAttributeName, JSON.stringify(data));\n          },\n        });\n        const mayBeAsyncIterableResult = await graphql({\n          schema,\n          source: sourceList1,\n        });\n        if (Symbol.asyncIterator in mayBeAsyncIterableResult) {\n          throw new Error('Expected a synchronous result');\n        }\n        graphqlResult =\n          mayBeAsyncIterableResult as graphqlTypes.ExecutionResult<any, any>;\n        spans = exporter.getFinishedSpans();\n      });\n\n      it('should attach response hook data to the resulting spans', () => {\n        const querySpan = spans.find(\n          span => span.attributes[AttributeNames.OPERATION_TYPE] === 'query'\n        );\n        const instrumentationResult = querySpan?.attributes[dataAttributeName];\n        assert.deepStrictEqual(\n          instrumentationResult,\n          JSON.stringify(graphqlResult)\n        );\n      });\n    });\n\n    describe('when responseHook throws an error', () => {\n      beforeEach(async () => {\n        create({\n          responseHook: (_span: Span, _data: graphqlTypes.ExecutionResult) => {\n            throw 'some kind of failure!';\n          },\n        });\n        const mayBeAsyncIterableResult = await graphql({\n          schema,\n          source: sourceList1,\n        });\n        if (Symbol.asyncIterator in mayBeAsyncIterableResult) {\n          throw new Error('Expected a synchronous result');\n        }\n        graphqlResult =\n          mayBeAsyncIterableResult as graphqlTypes.ExecutionResult<any, any>;\n        spans = exporter.getFinishedSpans();\n      });\n\n      it('should not do any harm', () => {\n        assert.deepStrictEqual(graphqlResult.data?.books?.length, 9);\n      });\n    });\n\n    describe('when responseHook is not a function', () => {\n      beforeEach(async () => {\n        // Cast to unknown so that it's possible to cast to GraphQLInstrumentationExecutionResponseHook later\n        const invalidTypeHook = 1234 as unknown;\n        create({\n          responseHook:\n            invalidTypeHook as GraphQLToolsExecutorInstrumentationExecutionResponseHook,\n        });\n        const mayBeAsyncIterableResult = await graphql({\n          schema,\n          source: sourceList1,\n        });\n        if (Symbol.asyncIterator in mayBeAsyncIterableResult) {\n          throw new Error('Expected a synchronous result');\n        }\n        graphqlResult =\n          mayBeAsyncIterableResult as graphqlTypes.ExecutionResult<any, any>;\n        spans = exporter.getFinishedSpans();\n      });\n\n      it('should not do any harm', () => {\n        assert.deepStrictEqual(graphqlResult.data?.books?.length, 9);\n      });\n    });\n  });\n\n  describe.skip('when query operation is not supported', () => {\n    let spans: ReadableSpan[];\n\n    beforeEach(async () => {\n      create({});\n      await graphql({\n        schema,\n        source: sourceBookById,\n        operationName: 'foo',\n      });\n      spans = exporter.getFinishedSpans();\n    });\n\n    afterEach(() => {\n      exporter.reset();\n      graphQLToolsExecutorInstrumentation.disable();\n      spans = [];\n    });\n\n    it('should have 3 spans', () => {\n      assert.deepStrictEqual(spans.length, 3);\n    });\n\n    it('should instrument execute', () => {\n      const executeSpan = spans[2];\n\n      assert.deepStrictEqual(\n        executeSpan.attributes[AttributeNames.SOURCE],\n        '\\n' +\n          '  query {\\n' +\n          '    book(id: *) {\\n' +\n          '      name\\n' +\n          '    }\\n' +\n          '  }\\n'\n      );\n      assert.deepStrictEqual(\n        executeSpan.attributes[AttributeNames.OPERATION_NAME],\n        'Operation \"foo\" not supported'\n      );\n      assert.deepStrictEqual(executeSpan.name, SpanNames.EXECUTE);\n      assert.deepStrictEqual(executeSpan.parentSpanId, undefined);\n    });\n  });\n\n  describe.skip('graphqlSync', () => {\n    const simpleSyncSchema = buildSchema(`\n      type Query {\n        hello: String\n      }\n    `);\n\n    beforeEach(() => {\n      create({});\n    });\n\n    afterEach(() => {\n      exporter.reset();\n    });\n\n    it('should instrument successful graphqlSync', () => {\n      const rootValue = {\n        hello: () => 'Hello world!',\n      };\n      const source = '{ hello }';\n\n      const res = graphqlSync({ schema: simpleSyncSchema, rootValue, source });\n      assert.deepEqual(res.data, { hello: 'Hello world!' });\n\n      // validate execute span is present\n      const spans = exporter.getFinishedSpans();\n      const executeSpans = spans.filter(s => s.name === 'query');\n      assert.deepStrictEqual(executeSpans.length, 1);\n      const [executeSpan] = executeSpans;\n      assert.deepStrictEqual(\n        executeSpan.attributes[AttributeNames.SOURCE],\n        source\n      );\n      assert.deepStrictEqual(\n        executeSpan.attributes[AttributeNames.OPERATION_TYPE],\n        'query'\n      );\n    });\n\n    it('should instrument when sync resolver throws', () => {\n      const rootValue = {\n        hello: () => {\n          throw Error('sync resolver error from tests');\n        },\n      };\n      const source = '{ hello }';\n\n      // graphql will not throw, it will return \"errors\" in the result and the field will be null\n      const res = graphqlSync({ schema: simpleSyncSchema, rootValue, source });\n      assert.deepEqual(res.data, { hello: null });\n\n      // assert errors are returned correctly\n      assert.deepStrictEqual(res.errors?.length, 1);\n      const resolverError = res.errors?.[0];\n      assert.deepStrictEqual(resolverError.path, ['hello']);\n      assert.deepStrictEqual(\n        resolverError.message,\n        'sync resolver error from tests'\n      );\n\n      // assert relevant spans are still created with error indications\n      const spans = exporter.getFinishedSpans();\n\n      // single resolve span with error and event for exception\n      const resolveSpans = spans.filter(s => s.name === SpanNames.RESOLVE);\n      assert.deepStrictEqual(resolveSpans.length, 1);\n      const resolveSpan = resolveSpans[0];\n      assert.deepStrictEqual(resolveSpan.status.code, SpanStatusCode.ERROR);\n      assert.deepStrictEqual(\n        resolveSpan.status.message,\n        'sync resolver error from tests'\n      );\n      const resolveEvent = resolveSpan.events[0];\n      assert.deepStrictEqual(resolveEvent.name, 'exception');\n      assert.deepStrictEqual(\n        resolveEvent.attributes?.[SemanticAttributes.EXCEPTION_MESSAGE],\n        'sync resolver error from tests'\n      );\n\n      // single execute span\n      const executeSpans = spans.filter(s => s.name === 'query');\n      assert.deepStrictEqual(executeSpans.length, 1);\n    });\n  });\n});\n"]}