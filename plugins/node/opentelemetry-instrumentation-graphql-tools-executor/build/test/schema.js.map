{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../test/schema.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as https from 'https';\nimport * as graphql from 'graphql';\n\nconst url1 =\n  'https://raw.githubusercontent.com/open-telemetry/opentelemetry-js/main/package.json';\n\nfunction getData(url: string): any {\n  return new Promise((resolve, reject) => {\n    https\n      .get(url, response => {\n        let data = '';\n        response.on('data', chunk => {\n          data += chunk;\n        });\n        response.on('end', () => {\n          resolve(JSON.parse(data));\n        });\n      })\n      .on('error', err => {\n        reject(err);\n      });\n  });\n}\n\nconst authors: Author[] = [];\nconst books: Book[] = [];\n\ninterface Book {\n  id: number;\n  name: string;\n  authorIds: number[];\n}\n\ninterface Address {\n  country: string;\n  city: string;\n}\n\ninterface Author {\n  id: number;\n  name: string;\n  address: Address;\n}\n\nfunction addBook(name: string, authorIds: string | number[] = []) {\n  if (typeof authorIds === 'string') {\n    authorIds = authorIds.split(',').map(id => parseInt(id, 10));\n  }\n  const id = books.length;\n  books.push({\n    id: id,\n    name: name,\n    authorIds: authorIds,\n  });\n  return books[books.length - 1];\n}\n\nfunction addAuthor(name: string, country: string, city: string) {\n  const id = authors.length;\n  authors.push({ id, name, address: { country, city } });\n  return authors[authors.length - 1];\n}\n\nfunction getBook(id: number) {\n  return books[id];\n}\n\nfunction getAuthor(id: number) {\n  return authors[id];\n}\n\nfunction prepareData() {\n  addAuthor('John', 'Poland', 'Szczecin');\n  addAuthor('Alice', 'Poland', 'Warsaw');\n  addAuthor('Bob', 'England', 'London');\n  addAuthor('Christine', 'France', 'Paris');\n  addBook('First Book', [0, 1]);\n  addBook('Second Book', [2]);\n  addBook('Third Book', [3]);\n}\n\nprepareData();\n\nexport function buildTestSchema() {\n  const Author = new graphql.GraphQLObjectType({\n    name: 'Author',\n    fields: {\n      id: {\n        type: graphql.GraphQLString,\n        resolve(obj, args) {\n          return obj.id;\n        },\n      },\n      name: {\n        type: graphql.GraphQLString,\n        resolve(obj, args) {\n          return obj.name;\n        },\n      },\n      description: {\n        type: graphql.GraphQLString,\n        resolve(obj, args) {\n          return new Promise((resolve, reject) => {\n            getData(url1).then((response: { [key: string]: string }) => {\n              resolve(response.description);\n            }, reject);\n          });\n        },\n      },\n      address: {\n        type: new graphql.GraphQLObjectType({\n          name: 'Address',\n          fields: {\n            country: {\n              type: graphql.GraphQLString,\n              resolve(obj, args) {\n                return obj.country;\n              },\n            },\n            city: {\n              type: graphql.GraphQLString,\n              resolve(obj, args) {\n                return obj.city;\n              },\n            },\n          },\n        }),\n        resolve(obj, args) {\n          return obj.address;\n        },\n      },\n    },\n  });\n\n  const Book = new graphql.GraphQLObjectType({\n    name: 'Book',\n    fields: {\n      id: {\n        type: graphql.GraphQLInt,\n        resolve(obj, args) {\n          return obj.id;\n        },\n      },\n      name: {\n        type: graphql.GraphQLString,\n        resolve(obj, args) {\n          return obj.name;\n        },\n      },\n      authors: {\n        type: new graphql.GraphQLList(Author),\n        resolve(obj, args) {\n          return obj.authorIds.map((id: number) => {\n            return authors[id];\n          });\n        },\n      },\n    },\n  });\n\n  const query = new graphql.GraphQLObjectType({\n    name: 'Query',\n    fields: {\n      author: {\n        type: Author,\n        args: {\n          id: { type: graphql.GraphQLInt },\n        },\n        resolve(obj, args, context) {\n          return Promise.resolve(getAuthor(args.id));\n        },\n      },\n      authors: {\n        type: new graphql.GraphQLList(Author),\n        resolve(obj, args, context) {\n          return Promise.resolve(authors);\n        },\n      },\n      book: {\n        type: Book,\n        args: {\n          id: { type: graphql.GraphQLInt },\n        },\n        resolve(obj, args, context) {\n          return Promise.resolve(getBook(args.id));\n        },\n      },\n      books: {\n        type: new graphql.GraphQLList(Book),\n        resolve(obj, args, context) {\n          return Promise.resolve(books);\n        },\n      },\n    },\n  });\n\n  const mutation = new graphql.GraphQLObjectType({\n    name: 'Mutation',\n    fields: {\n      addBook: {\n        type: Book,\n        args: {\n          name: { type: new graphql.GraphQLNonNull(graphql.GraphQLString) },\n          authorIds: {\n            type: new graphql.GraphQLNonNull(graphql.GraphQLString),\n          },\n        },\n        resolve(obj, args, context) {\n          return Promise.resolve(addBook(args.name, args.authorIds));\n        },\n      },\n    },\n  });\n\n  const schema = new graphql.GraphQLSchema({ query, mutation });\n  return schema;\n}\n"]}